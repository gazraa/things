{"version":3,"sources":["components/Header.js","components/ReviewStars.js","components/CardGrid.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","ReviewStars","r","style","width","this","setRatingWidth","props","reviewRating","reviewCount","CardGrid","state","cards","currentCard","cardDetail","_this2","axios","get","then","response","data","Products","setState","catch","error","request","console","log","message","config","e","document","getElementById","classList","remove","add","c","preventDefault","ReactDOM","render","react","_this3","onClick","hideDetail","src","ImageUrls","ImageUrl","alt","Title","dangerouslySetInnerHTML","__html","Description","Size","DisplayName","Currency","Price","bind","_this4","id","map","card","index","key","MoonpigProductNo","href","data-cardid","ProductImage","Link","Href","components_ReviewStars","Reviews","AverageStarReviewRating","ReviewCount","App","components_Header","components_CardGrid","Boolean","window","location","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e51b208.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport '../css/Header.scss';\n\nclass Header extends Component {\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <h1>Moonpig</h1>\n            \n            </div>\n        )\n    }\n}\n\nexport default Header","import React, { Component } from 'react';\n\nimport '../css/ReviewStars.scss';\n\nclass ReviewStars extends Component {\n\n    setRatingWidth(r){\n        const rating = r;\n        var width = 0;\n        \n        // work out the percentage for the css width\n        width = (rating/5)*100;\n\n        return width + '%';\n    }\n    \n    render() {\n        return (\n            <div className=\"ReviewStars card-item-reviews\">\n                <div className=\"card-item-reviews-stars\">\n                    <div className=\"card-item-reviews-stars-top\" style={{width: this.setRatingWidth(this.props.reviewRating)}}><span>★</span><span>★</span><span>★</span><span>★</span><span>★</span></div>\n                    <div className=\"card-item-reviews-stars-bottom\"><span>★</span><span>★</span><span>★</span><span>★</span><span>★</span></div>\n                </div>\n                <span className=\"card-item-reviews-count\">({this.props.reviewCount})</span>\n            </div>\n        )\n    }\n}\n\nexport default ReviewStars","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nimport ReviewStars from './ReviewStars';\n\nimport '../css/CardGrid.scss';\nimport '../css/Preloader.scss';\n\nclass CardGrid extends Component {\n\n  state = {\n    cards: [],\n    currentCard: '',\n    cardDetail: ''\n  }\n  \n  componentDidMount() {\n    // get data from API\n    axios.get(`https://cors-anywhere.herokuapp.com/https://search.moonpig.com/api/products?size=12&searchFacets=occasion_level_3:occasion%3Ewell%20done%3Enew%20job`)\n      .then(response => {\n        const cards = response.data.Products;\n        this.setState({ cards });\n        \n      })\n      .catch(function (error) {\n        if (error.response) {    \n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n\n\n        } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            \n\n\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', error.message);\n        }\n        console.log(error.config);\n      })\n      .then(function () {\n          // always executed\n          \n      \n      });\n  }\n\n  hideDetail(e){\n    // set css classes on modal container\n    document.getElementById('CardDetailModal').classList.remove('show');\n    document.getElementById('CardDetailModal').classList.add('hide');\n  }\n\n  cardDetail(c,e){\n\n    e.preventDefault();\n\n    // need to cleanse value of c for anything dodgy\n\n    const currentCard = c; \n    this.setState({ currentCard });\n\n    ReactDOM.render(\n      <Fragment>\n        <div className=\"card-detail-loader\">\n          <div className=\"dash one\"></div>\n          <div className=\"dash two\"></div>\n          <div className=\"dash three\"></div>\n          <div className=\"dash four\"></div>\n        </div>\n      </Fragment>\n      ,\n      document.getElementById('CardDetail')\n    );\n\n    document.getElementById('CardDetailModal').classList.add('show');\n    document.getElementById('CardDetailModal').classList.remove('hide');\n\n    axios.get(`https://cors-anywhere.herokuapp.com/https://www.moonpig.com/uk/api/product/product/?mpn=`+c)\n      .then(function (response) {\n        // handle success\n        // console.log('result is: ' + response.data);\n        const cardDetail = response.data;\n        this.setState({ cardDetail });\n\n        ReactDOM.render(\n          <Fragment>\n            <div className=\"card-detail-header\">\n              <button onClick={(e) => this.hideDetail(e)}>&#215;</button>\n            </div>\n            <div className=\"card-detail-content\">\n              <div className=\"card-detail-image\">\n                <img src={ cardDetail.ImageUrls[0].ImageUrl } alt={cardDetail.Title } />\n              </div>\n              <div className=\"card-detail-information\">\n                <h2>{ cardDetail.Title }</h2>\n                <div className=\"card-detail-information-description\" dangerouslySetInnerHTML={{ __html: cardDetail.Description }}></div>\n                <div className=\"card-detail-information-price\"><span className=\"card-detail-information-price-type\">{ cardDetail.Size.DisplayName }:</span><span className=\"card-detail-information-price-currency\">{ cardDetail.Size.Currency }</span><span className=\"card-detail-information-price-amount\">{ cardDetail.Size.Price }</span></div>\n                <div className=\"card-detail-information-button-buy\"><button>Personalise &amp; Send</button></div>\n              </div>\n            </div>\n          </Fragment>\n          ,\n          document.getElementById('CardDetail')\n        );\n\n      }\n      .bind(this))\n      .catch(function (error) {\n        if (error.response) {    \n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n\n\n        } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            \n\n\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', error.message);\n        }\n        console.log(error.config);\n      })\n      .then(function () {\n          // always executed\n          \n      \n      });\n  \n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div id=\"CardGrid\" className=\"card-grid\">\n          {this.state.cards.map((card, index) =>\n            <div className=\"card-item-container\" key={index + '-' + card.MoonpigProductNo}>\n              <div className=\"card-item\">\n                <div className=\"card-item-image-container\">\n                  <a href=\"/\" onClick={(e) => this.cardDetail(card.MoonpigProductNo, e)} data-cardid={card.MoonpigProductNo}>\n                    <img src={card.ProductImage.Link.Href} alt={card.Title} />\n                  </a>\n                </div>\n                <ReviewStars reviewRating={card.Reviews.AverageStarReviewRating} reviewCount={card.Reviews.ReviewCount} />             \n              </div>\n            </div>\n          )}\n        </div>\n        <div id=\"CardDetailModal\" className=\"card-detail-modal\">\n          <div id=\"CardDetail\" className=\"card-detail-container\" />\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default CardGrid\n","import React, { Component } from 'react';\n\n\n// import components\nimport Header from './components/Header';\nimport CardGrid from './components/CardGrid';\n\nimport './css/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n          <Header />\n\n          <CardGrid />\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}